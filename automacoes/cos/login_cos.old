import requests
import pickle
import os

# URLs do sistema COS
URL_LOGIN = "http://192.168.25.131:8080/COS_CSO/Entrar.jsp"  # URL correta!
URL_TESTE = "http://192.168.25.131:8080/COS_CSO/Principal.jsp"  # P√°gina autenticada
COOKIES_PATH = r"C:\Users\Gest√£o MX\Documents\AutoMX\login do cos\cookies.pkl"

# Credenciais do usu√°rio (substituir pelos reais)
CREDENCIAIS = {
    "Usuario": "lucianooliveira",
    "Senha": "nucleo_2022"
}

# Cabe√ßalhos simulando uma requisi√ß√£o AJAX leg√≠tima
HEADERS = {
    "Accept": "*/*",
    "Accept-Language": "pt-BR,pt;q=0.9,en;q=0.8",
    "Connection": "keep-alive",
    "Referer": "http://192.168.25.131:8080/COS_CSO/BuscarOrdemServico.jsp",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
    "X-Requested-With": "XMLHttpRequest",
    "Content-Type": "text/plain; charset=ISO-8859-1"
}


def carregar_sessao():
    print('inciando carregar sess√£o')
    """Tenta carregar cookies salvos para autentica√ß√£o."""
    session = requests.Session()
    
    if os.path.exists(COOKIES_PATH):
        try:
            with open(COOKIES_PATH, "rb") as f:
                cookies = pickle.load(f)
                session.cookies.update(cookies)
            #print("üîÑ Usando cookies salvos para autentica√ß√£o...")
            #print("üü° Cookies carregados:", session.cookies.get_dict())
            return session
        except Exception as e:
            print(f"‚ùå Erro ao carregar cookies: {e}")
    else:
        fazer_login(session)
        carregar_sessao() 
        print("‚ö†Ô∏è Nenhum cookie v√°lido encontrado! A autentica√ß√£o pode falhar.")
    return session

def fazer_login(session):
    """Realiza login no sistema e salva os cookies para futuras execu√ß√µes."""
    
    # URL base e par√¢metros da requisi√ß√£o
    URL_LOGIN = "http://192.168.25.131:8080/COS_CSO/LoginOut"
    PARAMS = {
        "Acao": "Logar",
        "Usuario": "lucianooliveira",
        "Senha": "nucleo_2022"
    }
    
    # Cabe√ßalhos replicando a requisi√ß√£o original
    HEADERS = {
        "Host": "192.168.25.131:8080",
        "Connection": "keep-alive",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
        "Accept": "*/*",
        "X-Requested-With": "XMLHttpRequest",
        "Referer": "http://192.168.25.131:8080/COS_CSO/Entrar.jsp",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "pt-BR,pt;q=0.9,en;q=0.8"
    }
    
    # Caminho para salvar os cookies (ajuste conforme necess√°rio)
    
    #URL_TESTE = "http://192.168.25.131:8080/COS_CSO/alguma_pagina_autenticada"  # Ajuste para uma p√°gina real

    # Enviar a requisi√ß√£o de login com GET
    response = session.get(URL_LOGIN, params=PARAMS, headers=HEADERS, allow_redirects=False)

    #print("üîç Resposta do servidor no login:", response.status_code)
    #print("üîç Cabe√ßalhos da resposta:", response.headers)
    #print("üîç Cookies recebidos:", session.cookies.get_dict())

    # Verificar se os cookies foram definidos corretamente
    if "JSESSIONID" in session.cookies.get_dict():
        print("‚úÖ Cookie de sess√£o recebido! Testando se o login foi bem-sucedido...")

        # Testar se conseguimos acessar uma p√°gina autenticada
        response_test = session.get(URL_TESTE, headers=HEADERS, allow_redirects=False)
        print("üîç Resposta do servidor no teste:", response_test.text)
        if "PaginaInicial.jsp" in response_test.text and "Acesse o site novamente" not in response_test.text:
            print("‚úÖ Login confirmado! Salvando cookies...")

            # Criar pasta se n√£o existir
            os.makedirs(os.path.dirname(COOKIES_PATH), exist_ok=True)

            # Salvar cookies
            with open(COOKIES_PATH, "wb") as f:
                pickle.dump(session.cookies, f)

            return session
        else:
            print("‚ùå Login falhou! O servidor n√£o autenticou o acesso.")
    else:
        print("‚ùå Nenhum cookie de sess√£o foi recebido. O login pode ter falhado.")

    return None

session = requests.Session()
fazer_login(session)