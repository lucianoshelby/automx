from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import TimeoutException, NoSuchElementException, NoSuchWindowException, NoAlertPresentException, WebDriverException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re

def fechar_popups(driver, timeout=10):
    """
    Fecha popups internos ou alertas do navegador usando WebDriverWait intercalados.
    Prioriza alertas para evitar erros quando eles aparecem primeiro.
    """
    popup_detectado = False
    print("üîç Iniciando verifica√ß√£o de popups...")

    # Calcula o n√∫mero de tentativas (timeout / 2, pois cada itera√ß√£o tem 2 segundos no total)
    num_tentativas = timeout // 2
    print(f"‚ÑπÔ∏è Total de tentativas: {num_tentativas}")

    # La√ßo principal com tentativas intercaladas
    for tentativa in range(num_tentativas):
        print(f"üîÑ Tentativa {tentativa + 1}/{num_tentativas}")

        # 1Ô∏è‚É£ Verifica alerta do navegador primeiro (1 segundo)
        try:
            print("üîé Verificando alerta do navegador...")
            WebDriverWait(driver, 1).until(EC.alert_is_present())
            alert = driver.switch_to.alert
            print("üî¥ Alerta do navegador detectado.")
            alert.accept()
            print("‚úÖ Alerta aceito com sucesso.")
            popup_detectado = True
            break  # Sai do la√ßo ap√≥s aceitar o alerta

        except TimeoutException:
            print("‚ÑπÔ∏è Nenhum alerta presente nesta tentativa.")

        # 2Ô∏è‚É£ Verifica popup interno (1 segundo), mas s√≥ se n√£o houver alerta
        try:
            print("üîé Verificando popup interno...")
            WebDriverWait(driver, 1).until(
                lambda driver: driver.find_element(By.ID, "divConfirmNotice").is_displayed()
            )
            print("‚ö†Ô∏è Popup interno vis√≠vel detectado.")
            popup_detectado = True
            
            # Trata o popup interno
            botao_salvar = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((
                    By.XPATH, 
                    "//div[@id='divConfirmNotice']//a[@onclick=\"saveServiceOrder('WARNING_SKIP');return false;\"]"
                ))
            )
            print("üîç Bot√£o 'Salvar' encontrado.")
            try:
                botao_salvar.click()
                print("‚úÖ Popup interno salvo com sucesso.")
            except Exception as e:
                print(f"‚ùå Erro ao clicar em 'Salvar': {e}")
                driver.execute_script("arguments[0].click();", botao_salvar)
                print("‚úÖ Clique via JavaScript executado.")
            
            break  # Sai do la√ßo ap√≥s tratar o popup interno

        except TimeoutException:
            print("‚ÑπÔ∏è Nenhum popup interno vis√≠vel nesta tentativa.")
        except WebDriverException as e:
            print(f"‚ùå Erro ao verificar popup interno (provavelmente devido a um alerta): {e}")
            # Tenta aceitar um alerta que pode ter aparecido durante a verifica√ß√£o
            try:
                alert = driver.switch_to.alert
                print("üî¥ Alerta detectado ap√≥s erro no popup interno.")
                alert.accept()
                print("‚úÖ Alerta aceito com sucesso.")
                popup_detectado = True
                break
            except NoAlertPresentException:
                print("‚ÑπÔ∏è Nenhum alerta encontrado ap√≥s erro.")

    # 3Ô∏è‚É£ Ap√≥s detectar algo, verifica alertas adicionais por 1 segundo
    if popup_detectado:
        print("üîç Verificando alertas adicionais por 1 segundo...")
        start_time = time.time()
        while time.time() - start_time < 1:
            try:
                alert = driver.switch_to.alert
                print("üî¥ Novo alerta do navegador detectado.")
                alert.accept()
                print("‚úÖ Alerta adicional aceito.")
            except NoAlertPresentException:
                time.sleep(0.1)
        print("‚úÖ Verifica√ß√£o de alertas adicionais conclu√≠da.")

    # 4Ô∏è‚É£ Resultado final
    if not popup_detectado:
        print("‚ùå Nenhum popup ou alerta foi detectado. O processo pode ter falhado.")
    
    return True

"""
def fechar_popups(driver, timeout=60):
    ""Fecha popups do navegador ou o popup interno de confirma√ß√£o. Se nenhum popup for encontrado, retorna erro.""

    popup_detectado = False  # Flag para verificar se pelo menos um popup foi detectado

    try:
        print("üîç Verificando se h√° popup interno (divConfirmNotice)...")
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.ID, "divConfirmNotice"))
        )
        print("‚ö†Ô∏è Popup interno detectado. Clicando em 'Salvar'...")
        time.sleep(1)
        
        try:
            #botao_salvar = driver.find_element(By.XPATH, "//div[@id='divConfirmNotice']//a[@onclick=\"saveServiceOrder('WARNING_SKIP');return false;\"]")
            print("üîç Bot√£o 'Salvar' encontrado.")
            botao_salvar = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Salvar') and @onclick=\"saveServiceOrder('WARNING_SKIP');return false;\"]"))
            )

             #Tente clicar normalmente
            botao_salvar.click()
            print("‚úÖ Clique executado normalmente.")
            
            # Alternativa com JavaScript
            
            #driver.execute_script("arguments[0].click();", botao_salvar)
            #print("‚úÖ Clique via JavaScript tamb√©m foi executado.")
            
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o 'Salvar': {e}")
        
        print("p√≥s salvar popup")
        print("‚úÖ Popup interno fechado com sucesso.")
        popup_detectado = True
    except Exception as e:
        print(f"‚úÖ Nenhum popup interno detectado ou erro: {e}")

    try:
        # 1Ô∏è‚É£ Fechar popups do navegador (alert)
        WebDriverWait(driver, 3).until(EC.alert_is_present())
        alert = driver.switch_to.alert
        print("üî¥ Fechando popup do navegador...")
        alert.accept()
        popup_detectado = True  # Marcamos que um popup foi encontrado

    except:
        print("‚úÖ Nenhum popup do navegador detectado.")

    

    # 3Ô∏è‚É£ Se nenhum popup foi detectado, retornar erro
    if not popup_detectado:
        raise Exception("‚ùå Nenhum popup foi detectado. O processo pode ter falhado.")
    return True"""
    


def esperar_elemento_visivel(driver, xpath, timeout=10):
    """Aguarda at√© que um elemento esteja vis√≠vel na p√°gina."""
    try:
        WebDriverWait(driver, timeout).until(EC.visibility_of_element_located((By.XPATH, xpath)))
        return True
    except TimeoutException:
        return False

def esperar_elemento_clicavel(driver, xpath, timeout=10):
    """Aguarda at√© que um elemento esteja vis√≠vel e clic√°vel na p√°gina."""
    try:
        WebDriverWait(driver, timeout).until(EC.element_to_be_clickable((By.XPATH, xpath)))
        return True
    except TimeoutException:
        return False

def esperar_popup(driver, timeout=5):
    """Aguarda e fecha todos os popups que aparecerem."""
    try:
        WebDriverWait(driver, timeout).until(EC.alert_is_present())
        # Uma vez que o primeiro popup √© detectado e fechado, mudar a l√≥gica para os pr√≥ximos
        while True:
            alert = driver.switch_to.alert
            print("üî¥ Fechando popup do navegador...")
            alert.accept()
            # Espera curta de 1 segundo para verificar se h√° mais popups
            try:
                WebDriverWait(driver, 1).until(EC.alert_is_present())
            except:
                # Se n√£o aparecer mais nenhum popup em 1 segundo, sair do loop
                print("‚úÖ Nenhum popup adicional detectado.")
                break
            #time.sleep(1)  # Pequena pausa para estabiliza√ß√£o do DOM
    except:
        print("‚úÖ Nenhum popup do navegador detectado.")


    """except TimeoutException:
        print("‚ùå Nenhum popup detectado ap√≥s 2 minutos. O salvamento pode n√£o ter sido conclu√≠do!")
        return False

def esperar_popup(driver, timeout=2):
    #Aguarda e fecha todos os popups que aparecerem.
    try:
        while True:
            try:
                WebDriverWait(driver, timeout).until(EC.alert_is_present())
                alert = driver.switch_to.alert
                print("üî¥ Fechando popup do navegador...")
                alert.accept()
                time.sleep(0.5)  # Pequena pausa para verificar se h√° mais popups
            except NoSuchWindowException:
                return True
    except TimeoutException:
        print("‚úÖ Nenhum novo popup detectado. Continuando...")"""

def localizar_aba_gspn(driver):
    """Extrai o n√∫mero da OS dentro do tr correto no formul√°rio 'detailForm'."""
    try:
        # Esperar o elemento estar vis√≠vel antes de tentar localiz√°-lo
        os_elemento = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, "//tr[@onclick=\"javascript: toggleTable('Main');\"]//span[contains(@title, 'Object ID')]"))
        )

        # Obter o texto vis√≠vel do elemento
        os_text = os_elemento.text

        # Regex para capturar o primeiro n√∫mero de 10 d√≠gitos
        match = re.search(r'\b\d{10}\b', os_text)

        if match:
            os_extraida = match.group(0)  # Retorna apenas o n√∫mero da OS encontrado
            print(f"‚úÖ OS extra√≠da com sucesso: {os_extraida}")
            return os_extraida

        print(f"‚ö†Ô∏è N√£o foi poss√≠vel extrair a OS do texto: {os_text}")
        return None

    except Exception as e:
        print(f"‚ùå Erro ao localizar a OS: {e}")
        return None

    except Exception as e:
        print(f"‚ùå Erro ao localizar a OS: {e}")
        return None
    
def popup_curto(driver, timeout=3):
    """
    Aguarda e fecha um popup de alerta, se aparecer.
    """
    try:
        WebDriverWait(driver, timeout).until(EC.alert_is_present())
        alert = driver.switch_to.alert
        alert.accept()
        print('Popup curto fechado!')
        input('pausa')
    except TimeoutException:
        print("Nenhum popup de alerta apareceu.")

def gerenciar_popup_e_janela(driver, original_window, popup_handle, timeout=5):
    print('inciando gerenciar popup')
    """Fun√ß√£o auxiliar para lidar com popups e fechamento de janelas."""
    try:
        # Aguarda um alerta e o aceita
        alert = WebDriverWait(driver, timeout).until(EC.alert_is_present())
        alert_text = alert.text
        print(f"üî¥ Popup detectado com texto: '{alert_text}'")
        alert.accept()

        # Verifica se a janela popup ainda existe ap√≥s aceitar o alerta
        if popup_handle in driver.window_handles:
            # Se a janela n√£o fechou automaticamente, verifica o texto do alerta para decidir o pr√≥ximo passo
            if "success" in alert_text.lower() or "Registered Stock is not found!" in alert_text:
                print("‚úÖ Janela deve fechar automaticamente ap√≥s 'success' ou estoque n√£o encontrado.")
            elif "Material number for service already exists" in alert_text:
                print("üîß Solicita√ß√£o j√° existe, fechando janela manualmente.")
                driver.switch_to.window(popup_handle)
                driver.close()
        else:
            print("‚úÖ Janela popup j√° foi fechada pelo alerta.")
        
        # Volta para a janela original
        if original_window in driver.window_handles:
            driver.switch_to.window(original_window)
            print("‚úÖ Retornou para a janela original.")
        else:
            print("‚ö†Ô∏è Janela original n√£o encontrada, usando a primeira dispon√≠vel.")
            driver.switch_to.window(driver.window_handles[0])
        
        return alert_text  # Retorna o texto do alerta para an√°lise posterior
    except TimeoutException:
        print("‚úÖ Nenhum popup detectado.")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerenciar popup/janela: {e}")
        if popup_handle in driver.window_handles:
            driver.switch_to.window(popup_handle)
            driver.close()
        driver.switch_to.window(original_window)
        return None